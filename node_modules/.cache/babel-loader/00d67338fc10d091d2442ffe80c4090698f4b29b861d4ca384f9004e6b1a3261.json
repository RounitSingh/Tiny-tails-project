{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\01-starting-setup\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport Loader from 'react-loader-spinner';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [histogramData, setHistogramData] = useState([]);\n  const [Submit, setSubmit] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const fetchData = async () => {\n    setSubmit(true);\n    try {} catch (error) {\n      console.error(error);\n      setSubmit();\n    }\n    const response = await axios.get('https://www.terriblytinytales.com/test.txt');\n    const text = response.data;\n    const words = text.split(/\\s+/);\n    const frequencyMap = {};\n    words.forEach(word => {\n      if (frequencyMap[word]) {\n        frequencyMap[word]++;\n      } else {\n        frequencyMap[word] = 1;\n      }\n    });\n    const sortedFrequency = Object.entries(frequencyMap).sort((a, b) => b[1] - a[1]);\n    const top20Words = sortedFrequency.slice(0, 20);\n    const histogramData = top20Words.map(_ref => {\n      let [word, frequency] = _ref;\n      return {\n        word,\n        frequency\n      };\n    });\n    setHistogramData(histogramData);\n    setSubmit(false);\n    setIsSubmitted(true);\n  };\n  const exportData = () => {\n    const csvData = histogramData.map(_ref2 => {\n      let {\n        word,\n        frequency\n      } = _ref2;\n      return `${word},${frequency}`;\n    }).join('\\n');\n    const blob = new Blob([csvData], {\n      type: 'text/csv;charset=utf-8;'\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.setAttribute('download', 'histogram.csv');\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!isSubmitted && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button\",\n      onClick: fetchData,\n      disabled: Submit,\n      children: Submit ? /*#__PURE__*/_jsxDEV(Loader, {\n        type: \"ThreeDots\",\n        color: \"#fff\",\n        height: 10,\n        width: 40\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 5\n      }, this) : 'Submit'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 8\n    }, this), histogramData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart1\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(BarChart, {\n          className: \"barChart\",\n          width: 1000,\n          height: 400,\n          data: histogramData,\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"word\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Bar, {\n            dataKey: \"frequency\",\n            fill: \"#8884d8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: exportData,\n          children: \"Export\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 8\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"lJlb16NwFqer4WzPncecU3cmP7c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","Loader","jsxDEV","_jsxDEV","App","_s","histogramData","setHistogramData","Submit","setSubmit","isSubmitted","setIsSubmitted","fetchData","error","console","response","get","text","data","words","split","frequencyMap","forEach","word","sortedFrequency","Object","entries","sort","a","b","top20Words","slice","map","_ref","frequency","exportData","csvData","_ref2","join","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","setAttribute","body","appendChild","click","removeChild","children","className","onClick","disabled","color","height","width","fileName","_jsxFileName","lineNumber","columnNumber","length","strokeDasharray","dataKey","fill","_c","$RefreshReg$"],"sources":["D:/react/01-starting-setup/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport Loader from 'react-loader-spinner';\nimport './index.css';\n\n\n function App() {\n  const [histogramData, setHistogramData] = useState([]);\n  const [Submit, setSubmit] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n   const fetchData = async () => {\n    setSubmit(true);\ntry {\n  \n} catch (error) {\n  console.error(error);\n  setSubmit()\n}\n\n\n const response = await axios.get('https://www.terriblytinytales.com/test.txt');\n    const text = response.data;\n    const words = text.split(/\\s+/);\n    const frequencyMap = {};\n    words.forEach((word) => {\n      if (frequencyMap[word]) {\n        frequencyMap[word]++;\n      } else {\n        frequencyMap[word] = 1;\n      }\n    });\n    const sortedFrequency = Object.entries(frequencyMap).sort((a, b) => b[1] - a[1]);\n    const top20Words = sortedFrequency.slice(0, 20);\n    const histogramData = top20Words.map(([word, frequency]) => ({ word, frequency }));\n    setHistogramData(histogramData);\n    setSubmit(false);\n    setIsSubmitted(true);\n  };\n   const exportData = () => {\n    const csvData = histogramData.map(({ word, frequency }) => `${word},${frequency}`).join('\\n');\n    const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8;' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.setAttribute('download', 'histogram.csv');\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n   return (\n    <div>\n    {!isSubmitted && (\n       <button className='button' onClick={fetchData} disabled={Submit}>\n   {Submit ? (\n    <Loader type='ThreeDots' color='#fff' height={10} width={40} /> \n    ) :('Submit')}\n       \n  </button>\n  )}\n     \n      {histogramData.length > 0 && (\n       <div className='chart1'>\n       <div>\n          <BarChart className='barChart' width={1000} height={400} data={histogramData}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"word\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"frequency\" fill=\"#8884d8\" />\n          </BarChart>\n          <button onClick={exportData}>Export</button>\n        </div></div>\n        \n      )}\n    </div>\n  );\n}\n export default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}